ARG OS_RELEASE=32
ARG OS_IMAGE=fedora:$OS_RELEASE

FROM $OS_IMAGE as build

ARG OS_RELEASE
ARG OS_IMAGE
ARG HTTP_PROXY=""
ARG USER="insteonmqtt"

LABEL MAINTAINER riek@llunved.net

ENV LANG=en_US.UTF-8
USER root

RUN mkdir -p /insteonmqtt
WORKDIR /insteonmqtt

ADD ./rpmreqs-rt.txt ./rpmreqs-build.txt ./rpmreqs-dev.txt /insteonmqtt/

ENV http_proxy=$HTTP_PROXY
RUN rpm -ivh  https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$OS_RELEASE.noarch.rpm \
    && rpm -ivh  https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$OS_RELEASE.noarch.rpm \
    && dnf -y upgrade \
    && dnf -y install $(cat rpmreqs-rt.txt) $(cat rpmreqs-build.txt) 


# Create the minimal target environment
RUN mkdir /sysimg \
    && dnf install --installroot /sysimg --releasever $OS_RELEASE --setopt install_weak_deps=false --nodocs -y coreutils-single glibc-minimal-langpack $(cat rpmreqs-rt.txt) \
    && if [ ! -z "$DEVBUILD" ] ; then dnf install  --installroot /sysimg --releasever $OS_RELEASE --setopt install_weak_deps=false --nodocs -y $(cat rpmreqs-dev.txt); fi \
    && rm -rf /sysimg/var/cache/* \
    && ls -alh /sysimg/var/cache

RUN adduser -R /sysimg -u 1010 -r -g root -G dialout -d /insteonmqtt -s /sbin/nologin -c "insteonmqtt user" $USER

#FIXME this needs to be more elegant
RUN ln -s /sysimg/usr/share/zoneinfo/America/New_York /sysimg/etc/localtime

ADD . /insteonmqtt/

RUN /usr/bin/python3 -m virtualenv -v /insteonmqtt/ && source /insteonmqtt/bin/activate

# Add some dev / debug content
#RUN if [ ! -z "$DEVBUILD" ] ; then npm install -g nodemon; fi 

RUN /usr/bin/pip3 install . 
RUN mv /insteonmqtt/config.yaml /insteonmqtt/config.yaml.example
RUN cp -pR /insteonmqtt/ /sysimg/insteonmqtt/

# Now create the runtime image
FROM scratch AS runtime

COPY --from=build /sysimg /

WORKDIR /insteonmqtt

ENV USER=$USER
ENV CHOWN=true 
ENV CHOWN_DIRS="/etc/insteonmqtt /var/log/insteonmqtt /var/lib/insteonmqtt" 
  
#FIXME - Do we need this?
RUN if [ ! -z "$DEVBUILD" ] ; then chown -R ${USER}:root /insteonmqtt ; fi

ADD ./scripts/entrypoint.sh \ 
    ./scripts/install.sh \ 
    ./scripts/upgrade.sh \
    ./scripts/uninstall.sh /sbin/ 
ADD ./scripts/start.sh /bin/ 
RUN chmod +x /sbin/entrypoint.sh \ 
    && chmod +x /sbin/install.sh \
    && chmod +x /sbin/upgrade.sh \
    && chmod +x /sbin/uninstall.sh \ 
    &&  chmod +x /bin/start.sh

EXPOSE 8091
ENTRYPOINT ["/sbin/entrypoint.sh"]
CMD ["/bin/start.sh"]

LABEL RUN="podman run --rm -t -i --name \$NAME -p 8091:8091 --net=host --device /dev/ttyACM0 --entrypoint /sbin/entrypoint.sh -v /var/lib/insteonmqtt/insteonmqtt:/insteonmqtt/store -v /var/lib/insteonmqtt/openzwave:/etc/openzwave -v /var/log/insteonmqtt:/var/log/insteonmqtt \$IMAGE /bin/start.sh"
LABEL INSTALL="podman run --rm -t -i --privileged --rm --net=host --ipc=host --pid=host -v /:/host -v /run:/run -e HOST=/host -e IMAGE=\$IMAGE -e NAME=\$NAME -e LOGDIR=/var/log -e DATADIR=/var/lib --entrypoint /bin/sh  \$IMAGE /sbin/install.sh"
LABEL UPGRADE="podman run --rm -t -i --privileged --rm --net=host --ipc=host --pid=host -v /:/host -v /run:/run -e HOST=/host -e IMAGE=\$IMAGE -e NAME=\$NAME -e LOGDIR=/var/log -e DATADIR=/var/lib --entrypoint /bin/sh  \$IMAGE /sbin/upgrade.sh"
LABEL UNINSTALL="podman run --rm -t -i --privileged --rm --net=host --ipc=host --pid=host -v /:/host -v /run:/run -e HOST=/host -e IMAGE=\$IMAGE -e NAME=\$NAME -e LOGDIR=/var/log -e DATADIR=/var/lib --entrypoint /bin/sh  \$IMAGE /sbin/uninstall.sh"

